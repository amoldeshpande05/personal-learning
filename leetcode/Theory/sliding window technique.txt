eg: Find the max sum of any continuour subArray
[2,3,4,1,5]
k = 3

There is one tradional high school method, dont think about the performance, take a variable called max, put max = -999
and write a nested loop where first loop is going from 0 to n and 2nd nested loop is going from i to 3 and calculate the max sum and the exit
something like this



maxSum = float("-inf")

currSum = 0

for i in range(len(arr)):
    for j=i; j<3 and j<len(arr); j++:
       currSum += arr[j]
    maxSum = max(maxSum,currSum)
    currSum = 0


Somthing like this, which is O(n^2) and time consuming.



The best method to use is the sliding window technique. This is the algorithm where we maintain 2 pointers start and end(which is the loop pointer). Now we have to write a single loop where start is 0, and end is the loop iterator variable.
Inside the loop, write a logic for window, suppose if the window is of the length k, write a if with end - start + k, +k is because I am assuming index start from 0, inside the window, you increment start, update the max variable and then clear the currSum


The program is as follows:

# [2,3,4,5,6]

def max_sum_subarray(arr,k):
    start = 0
    max_sum = float('-inf')
    curr_sum = 0
    for end, val in enumerate(arr):
        curr_sum+=val
        if (end - start)+1 == k:
            max_sum = max(curr_sum,max_sum)
            curr_sum -= arr[start]
            start+=1
    return max_sum
            
           
arr = [2,3,4,1,5] 
k = 3

print("expected  : 10")
print("actual : ", max_sum_subarray(arr,k))
        

By this the time complexion is O(N)
        


Now the above example is for the fixed size of the sliding window.
Now the question comes, how should we solve for dynamic size sliding window, and the length is maintained by the program logic dynamically

Example to solve this:
Question : Smallest subarray such that the sum of the subArray is greater than equal to x


to solve this.

minSize = float(inf)
start = 0
currSum=0
for end, val in enumerate(array):
    currSum+=val
    while currSum>= x:
        minSize = min(end-start+1,min)
        currSum-=arr[start]
        start+=1
return minSize

        



        






