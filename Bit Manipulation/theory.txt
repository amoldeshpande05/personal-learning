Decimal Number: Computer first converts this to binary and then operate

How to convert binary number into Decimal
101   -> 1 * 2^2 + 0 * 2^1 + 1 *2^0 = 5

How to convert Decimal number to binary
> Go on taking the lcm of the number with 2, and go on adding the reminder, that will be  your binary
> Best approach, go on dividing the numer with 2, if the number is odd then add 1, or add 0, go on until you get 1



- Adding the two binary digits 
1 0 1 =>5
1 1 1 =>7

1 + 1 = 0 and carry 1
1 + 0 + 1 = 0 and carry 1
1 + 1 + 1 = 1 and carry 1
1 + 0 = 1
total result is 1100 = 12


Substraction is completely different:
 
 9 - 7 should be written as 9 + (-7)
 we have to inverse the substract operand

 how to find the negative inverse????
 - > by 2's compliement
     - invert all bits
       add one


Right shift operator
12 >> 6 
1100   >> 0110  

>>> 12>>1
6
>>> 12>>2
3
Whenever we are doing right shift operator, we are dividing the number by 2

Left shift operator

whenever we are doing left shift operator, we are multiplying the number by 2








Find even or odd number. Since % is very expensive.
Notice a pattern, all the even number's binary bit is always 0,
Notice a pattern, all the odd number's binary bit is always 1
Now how to get the last bit?
- By the concept of masking. 
The solution is as follows
 -> if a number & 1 == 0 then it's even or else 1

before a % 2 == 0 then even 
or it's odd


after:
    if a & 1 == 0:
         even
    else 
        odd

https://www.youtube.com/watch?v=Db8OmMfzwl8
https://www.youtube.com/watch?v=h7meukyY_bQ



FINDING THE NUMBER OF 1's in Number bits

loop N = N & (N-1) untill 0, and have a count it will run untill you get the total number of bits


FINDING THE RIGHT MOST SET Bit
NUMBER & (-NUMBER) will give the right most set bit and rest all 0's





Bit masking
1. Find the ith bit. Now how to find that?
    AND the number with a number consisting on 0's with i'th position as 1
    eg: n-> 1 0 0 1 1 0 1 0 1
     mask-> 0 0 0 1 0 0 0 0 0

     now if you get 1 means the i'th number is 1 or it is 0

     code : 1 << (left shift) i time
2. Set ith bit to 1
    n -> 1 0 0 1 1 0 1 0 1 
    m -> 0 0 0 0 0 1 0 0 0
Find the mask and do OR then you will automatically set the bit
mask = 1 << i  n  = n | mask


3. Now the tricky question comes when we want to change ith value to 0 from 1
n -> 1 0 0 1 1 0 1 0 1
     1 1 1 1 0 1 1 1 1
     Mask with 1, and then ith position will be 0, and do AND
     how to find mask of 1, shift i times <<i and then negate the byte. 
 

4. To 


XOR properties:
if same number then 0, if different number then 1.
properties:
1)  5^5 = 0
2)  0^n = 0


Tips and Tricks
1.  X&(X-1) - > will clear the lowest set bit
2.  X & ~(X-1) -> Extracts the lowest set bit
3.  x & (x+(1<<n)) -> Run of set bits starting at bit n cleared   - findout
4.  x & ~(x+(1<<n)) - > Run of set bits in X, starting at bit n    - findout
5.  x | (x+1) - > x with lowest cleared bit set    - findout
6. x | (x - (1 << n)) = x, with the run of cleared bits (possibly length 0) starting at bit n set  -findout
7 . x | ~(x - (1 << n)) = the lowest run of cleared bits (possibly length 0) in x, starting at bit n are the only clear bits.  - findout
